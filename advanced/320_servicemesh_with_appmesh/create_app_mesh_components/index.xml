<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Create the App Mesh Components on Amazon EKS Workshop</title><link>/advanced/320_servicemesh_with_appmesh/create_app_mesh_components/</link><description>Recent content in Create the App Mesh Components on Amazon EKS Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 13 Nov 2018 16:32:30 +0900</lastBuildDate><atom:link href="/advanced/320_servicemesh_with_appmesh/create_app_mesh_components/index.xml" rel="self" type="application/rss+xml"/><item><title>About Sidecars</title><link>/advanced/320_servicemesh_with_appmesh/create_app_mesh_components/about_sidecar/</link><pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate><guid>/advanced/320_servicemesh_with_appmesh/create_app_mesh_components/about_sidecar/</guid><description>As decoupled logic, an App Mesh sidecar container must run alongside each pod in the DJ App deployment.
This can be setup in few different ways:
Before installing the deployment, we could modify the DJ App deployment&amp;rsquo;s container specs to include App Mesh sidecar containers. When deployed, it would run the sidecar.
After installing the deployment, we could patch the deployment to include the sidecar container specs.</description></item><item><title>Creating the Injector Controller</title><link>/advanced/320_servicemesh_with_appmesh/create_app_mesh_components/create_injector_controller/</link><pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate><guid>/advanced/320_servicemesh_with_appmesh/create_app_mesh_components/create_injector_controller/</guid><description>To create the injector controller, we&amp;rsquo;ll run a script that creates a namespace, generates certificates, and then installs the injector deployment.
From the base repository directory, change into the injector directory:
cd 2_create_injector Next, run the create.sh script:
./create.sh Output should look similar to:
namespace/appmesh-inject created creating certs in tmpdir /var/folders/02/qfw6pbm501xbw4scnk20w80h0_xvht/T/tmp.LFO95khQ Generating RSA private key, 2048 bit long modulus .........&amp;#43;&amp;#43;&amp;#43; ..............................&amp;#43;&amp;#43;&amp;#43; e is 65537 (0x10001) certificatesigningrequest.certificates.k8s.io/aws-app-mesh-inject.appmesh-inject created NAME AGE REQUESTOR CONDITION aws-app-mesh-inject.</description></item><item><title>Define the Injector Targets</title><link>/advanced/320_servicemesh_with_appmesh/create_app_mesh_components/set_injector_criteria/</link><pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate><guid>/advanced/320_servicemesh_with_appmesh/create_app_mesh_components/set_injector_criteria/</guid><description>By default, the injector won&amp;rsquo;t act on any pods â€” we&amp;rsquo;ll need to give it criteria on what its auto-inject targets should be.
For the purpose of this tutorial, we&amp;rsquo;ll make it inject the App Mesh sidecar into any new pods created in the prod namespace. To do that, we&amp;rsquo;ll label our prod namespace with appmesh.k8s.aws/sidecarInjectorWebhook=enabled.
Return to the repo&amp;rsquo;s base dir:
cd .. And run the following command to label the prod namespace:</description></item><item><title>Adding the CRDs</title><link>/advanced/320_servicemesh_with_appmesh/create_app_mesh_components/adding_crds/</link><pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate><guid>/advanced/320_servicemesh_with_appmesh/create_app_mesh_components/adding_crds/</guid><description>There are two ways to create the components of the App Mesh service mesh:
With the AWS CLI With kubectl via CRDs For this tutorial, we&amp;rsquo;ll use kubectl to define the App Mesh components.
To do this, we&amp;rsquo;ll add Custom Resource Definitions (CRDs), and the App Mesh controller logic that syncs our kubernetes cluster&amp;rsquo;s CRD state with the AWS cloud-side App Mesh control plane.
To add the CRDs, from the repository base directory, execute the following commands:</description></item><item><title>Conclusion</title><link>/advanced/320_servicemesh_with_appmesh/create_app_mesh_components/conclusion/</link><pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate><guid>/advanced/320_servicemesh_with_appmesh/create_app_mesh_components/conclusion/</guid><description>Congratulations on deploying the App Mesh Components!
Now that we have our App Mesh components created, we&amp;rsquo;ll introduce observability, analytics, and routing functionality into our DJ App by porting it to run on top of an App Mesh service mesh.</description></item></channel></rss>