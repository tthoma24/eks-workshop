<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>operations on Amazon EKS Workshop</title><link>/tags/operations/</link><description>Recent content in operations on Amazon EKS Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 13 Nov 2018 16:32:30 +0900</lastBuildDate><atom:link href="/tags/operations/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploying Jenkins</title><link>/intermediate/210_jenkins/</link><pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate><guid>/intermediate/210_jenkins/</guid><description>Deploy Jenkins In this Chapter, we will deploy Jenkins using the helm package manager we installed in the last module.</description></item><item><title>CI/CD with CodePipeline</title><link>/intermediate/220_codepipeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/intermediate/220_codepipeline/</guid><description>CI/CD with CodePipeline Continuous integration (CI) and continuous delivery (CD) are essential for deft organizations. Teams are more productive when they can make discrete changes frequently, release those changes programmatically and deliver updates without disruption.
In this module, we will build a CI/CD pipeline using AWS CodePipeline. The CI/CD pipeline will deploy a sample Kubernetes service, we will make a change to the GitHub repository and observe the automated delivery of this change to the cluster.</description></item><item><title>Logging with Elasticsearch, Fluentd, and Kibana (EFK)</title><link>/intermediate/230_logging/</link><pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate><guid>/intermediate/230_logging/</guid><description>Implement Logging with EFK In this Chapter, we will deploy a common Kubernetes logging pattern which consists of the following:
Fluentd is an open source data collector providing a unified logging layer, supported by 500+ plugins connecting to many types of systems. Elasticsearch is a distributed, RESTful search and analytics engine. Kibana lets you visualize your Elasticsearch data. Together, Fluentd, Elasticsearch and Kibana is also known as “EFK stack”.</description></item><item><title>Monitoring using Prometheus and Grafana</title><link>/intermediate/240_monitoring/</link><pubDate>Sun, 14 Oct 2018 09:27:46 -0400</pubDate><guid>/intermediate/240_monitoring/</guid><description>Monitoring using Prometheus and Grafana In this Chapter, we will deploy Prometheus and Grafana to monitor Kubernetes cluster</description></item><item><title>Tracing with X-Ray</title><link>/intermediate/245_x-ray/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/intermediate/245_x-ray/</guid><description>Tracing with X-Ray As distributed systems evolve, monitoring and debugging services becomes challenging. Container-orchestration platforms like Kubernetes solve a lot of problems, but they also introduce new challenges for developers and operators in understanding how services interact and where latency exists. AWS X-Ray helps developers analyze and debug distributed services.
In this module, we are going to deploy the X-Ray agent as a DaemonSet, deploy sample front-end and back-end services that are instrumented with the X-Ray SDK, make some sample requests and then examine the traces and service maps in the AWS Management Console.</description></item><item><title>EKS CloudWatch Container Insights</title><link>/intermediate/250_cloudwatch_container_insights/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/intermediate/250_cloudwatch_container_insights/</guid><description>In this chapter we will learn and leverage the new CloudWatch Container Insights to see how you can use native CloudWatch features to monitor your EKS Cluster performance.
You can use CloudWatch Container Insights to collect, aggregate, and summarize metrics and logs from your containerized applications and microservices. Container Insights is available for Amazon Elastic Container Service, Amazon Elastic Kubernetes Service, and Kubernetes platforms on Amazon EC2. The metrics include utilization for resources such as CPU, memory, disk, and network.</description></item><item><title>GitOps with Weave Flux</title><link>/intermediate/260_weave_flux/</link><pubDate>Sun, 14 Oct 2018 19:56:14 -0400</pubDate><guid>/intermediate/260_weave_flux/</guid><description>GitOps with Weave Flux GitOps, a term coined by Weaveworks, is a way to do continuous delivery. Git is used as single source of truth for deploying into your cluster. This is easy for a development team as they are already familiar with git and do not need to know other tools. Weave Flux is a tool that runs in your Kubernetes cluster and implements changes based on monitoring Git and image repositories.</description></item><item><title>Custom Resource Definition</title><link>/intermediate/270_custom_resource_definition/</link><pubDate>Tue, 09 Apr 2019 00:00:00 -0300</pubDate><guid>/intermediate/270_custom_resource_definition/</guid><description>Custom Resource Definition Introduction In this Chapter, we will review the Custom Resource Definition (CRD) concept, and some examples of usage.
In Kubernetes API, a resource is an endpoint storing the API objects in a collection. As an example, the pods resource contains a collection of Pod objects.
CRD’s are extensions of Kubernetes API that stores collection of API objects of certain kind. They extend the Kubernetes API or allow you to add your own API into the cluster.</description></item><item><title>Service Mesh with Istio</title><link>/advanced/310_servicemesh_with_istio/</link><pubDate>Tue, 13 Nov 2018 16:32:30 +0900</pubDate><guid>/advanced/310_servicemesh_with_istio/</guid><description>Service Mesh With Istio A service mesh is a dedicated infrastructure layer for handling service-to-service communication. It’s responsible for the reliable delivery of requests through the complex topology of services that comprise a modern, cloud native application.
Service mesh solutions have two distinct components that behave somewhat differently: 1) a data plane, and 2) a control plane. The following diagram illustrates the basic architecture.
The data planeis composed of a set of intelligent proxies (Envoy) deployed as sidecars.</description></item><item><title>Service Mesh with App Mesh</title><link>/advanced/320_servicemesh_with_appmesh/</link><pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate><guid>/advanced/320_servicemesh_with_appmesh/</guid><description>At re:invent 2018, we announced AWS App Mesh, a service mesh that provides application-level networking to make it easy for your services to communicate with each other across multiple types of compute infrastructure. App Mesh standardizes how your services communicate, giving you end-to-end visibility and ensuring high-availability for your applications.
Service meshes like AWS App Mesh help you to run and monitor HTTP and TCP services at scale. Whether your application consists of AWS Fargate, Amazon EC2, Amazon ECS, Amazon Kubernetes Service, or Kubernetes clusters or instances, App Mesh provides consistent routing and traffic monitoring functionality, giving you insight into problems and the ability to re-route traffic after failures or code changes.</description></item></channel></rss>