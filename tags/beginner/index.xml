<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>beginner on Amazon EKS Workshop</title><link>/tags/beginner/</link><description>Recent content in beginner on Amazon EKS Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/tags/beginner/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>/010_introduction/</link><pubDate>Wed, 03 Oct 2018 10:23:24 -0700</pubDate><guid>/010_introduction/</guid><description>Introduction to Kubernetes A walkthrough of basic Kubernetes concepts.
Welcome to the Amazon EKS Workshop!
The intent of this workshop is to educate users about the features of Amazon EKS.
Background in EKS, Kubernetes, Docker, and container workflows are not required, but they are recommended.
This chapter will introduce you to the basic workings of Kubernetes, laying the foundation for the hands-on portion of the workshop.
Specifically, we will walk you through the following topics:</description></item><item><title>Start the workshop...</title><link>/020_prerequisites/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/020_prerequisites/</guid><description>Getting Started To start the workshop, follow one of the following depending on whether you are&amp;hellip;
&amp;hellip;running the workshop on your own (in your own account), or &amp;hellip;attending an AWS hosted event (using AWS provided hashes) Once you have completed with either setup, continue with Create a Workspace</description></item><item><title>Launch using eksctl</title><link>/030_eksctl/</link><pubDate>Tue, 07 Aug 2018 13:36:57 -0700</pubDate><guid>/030_eksctl/</guid><description>Launch using eksctl eksctl is a tool jointly developed by AWS and Weaveworks that automates much of the experience of creating EKS clusters.
In this module, we will use eksctl to launch and configure our EKS cluster and nodes.</description></item><item><title>Deploy the Kubernetes Dashboard</title><link>/beginner/040_dashboard/</link><pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate><guid>/beginner/040_dashboard/</guid><description>Deploy the Kubernetes Dashboard In this Chapter, we will deploy the official Kubernetes dashboard, and connect through our Cloud9 Workspace.</description></item><item><title>Beginner</title><link>/beginner/</link><pubDate>Sat, 25 Jan 2020 16:18:56 -0500</pubDate><guid>/beginner/</guid><description>Beginner</description></item><item><title>Deploy the Example Microservices</title><link>/beginner/050_deploy/</link><pubDate>Tue, 18 Sep 2018 17:40:09 -0500</pubDate><guid>/beginner/050_deploy/</guid><description>Deploy the Example Microservices Deploy our Sample Applications Deploy NodeJS Backend API Deploy Crystal Backend API Let&amp;#39;s check Service Types Ensure the ELB Service Role exists Deploy Frontend Service Find the Service Address Scale the Backend Services Scale the Frontend Cleanup the applications</description></item><item><title>Helm</title><link>/beginner/060_helm/</link><pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate><guid>/beginner/060_helm/</guid><description>Helm This tutorial has been updated for Helm v3. In version 3, the Tiller component was removed, which simplified operations and improved security.
Helm is a package manager for Kubernetes that packages multiple Kubernetes resources into a single logical deployment unit called a Chart. Charts are easy to create, version, share, and publish.
In this chapter, we&amp;rsquo;ll cover installing Helm. Once installed, we&amp;rsquo;ll demonstrate how Helm can be used to deploy a simple nginx webserver, and a more sophisticated microservice.</description></item><item><title>Health Checks</title><link>/beginner/070_healthchecks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/beginner/070_healthchecks/</guid><description>Health Checks By default, Kubernetes will restart a container if it crashes for any reason. It uses Liveness and Readiness probes which can be configured for running a robust application by identifying the healthy containers to send traffic to and restarting the ones when required.
In this section, we will understand how liveness and readiness probes are defined and test the same against different states of a pod. Below is the high level description of how these probes work.</description></item><item><title>Autoscaling our Applications and Clusters</title><link>/beginner/080_scaling/</link><pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate><guid>/beginner/080_scaling/</guid><description>Implement AutoScaling with HPA and CA In this Chapter, we will show patterns for scaling your worker nodes and applications deployments automatically. Automatic scaling in K8s comes in two forms:
Horizontal Pod Autoscaler (HPA) scales the pods in a deployment or replica set. It is implemented as a K8s API resource and a controller. The controller manager queries the resource utilization against the metrics specified in each HorizontalPodAutoscaler definition.</description></item><item><title>Intro to RBAC</title><link>/beginner/090_rbac/</link><pubDate>Wed, 03 Oct 2018 10:14:46 -0700</pubDate><guid>/beginner/090_rbac/</guid><description>Intro to RBAC In this chapter, we&amp;rsquo;ll learn about how role based access control (RBAC) works in kubernetes.</description></item><item><title>Using Spot Instances with EKS</title><link>/beginner/150_spotworkers/</link><pubDate>Tue, 18 Sep 2018 17:40:09 -0500</pubDate><guid>/beginner/150_spotworkers/</guid><description>Using Spot Instances with EKS In this module, you will learn how to provision, manage, and maintain your Kubernetes clusters with Amazon EKS at any scale on Spot Instances to optimize cost and scale.</description></item><item><title>Stateful containers using StatefulSets</title><link>/beginner/170_statefulset/</link><pubDate>Sat, 25 Jan 2020 16:18:56 -0500</pubDate><guid>/beginner/170_statefulset/</guid><description>Stateful containers using StatefulSets StatefulSet manages the deployment and scaling of a set of Pods, and provides guarantees about the ordering and uniqueness of these Pods, suitable for applications that require one or more of the following.
Stable, unique network identifiers Stable, persistent storage Ordered, graceful deployment and scaling Ordered, automated rolling updates In this Chapter, we will review how to deploy MySQL database using StatefulSet and Amazon Elastic Block Store (EBS) as PersistentVolume.</description></item><item><title>Conclusion</title><link>/910_conclusion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/910_conclusion/</guid><description>Conclusion</description></item><item><title>Cleanup</title><link>/920_cleanup/</link><pubDate>Tue, 07 Aug 2018 13:37:53 -0700</pubDate><guid>/920_cleanup/</guid><description>Cleanup</description></item></channel></rss>