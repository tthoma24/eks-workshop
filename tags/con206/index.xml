<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CON206 on Amazon EKS Workshop</title><link>/tags/con206/</link><description>Recent content in CON206 on Amazon EKS Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 14 Oct 2018 09:27:46 -0400</lastBuildDate><atom:link href="/tags/con206/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>/010_introduction/</link><pubDate>Wed, 03 Oct 2018 10:23:24 -0700</pubDate><guid>/010_introduction/</guid><description>Introduction to Kubernetes A walkthrough of basic Kubernetes concepts.
Welcome to the Amazon EKS Workshop!
The intent of this workshop is to educate users about the features of Amazon EKS.
Background in EKS, Kubernetes, Docker, and container workflows are not required, but they are recommended.
This chapter will introduce you to the basic workings of Kubernetes, laying the foundation for the hands-on portion of the workshop.
Specifically, we will walk you through the following topics:</description></item><item><title>Start the workshop...</title><link>/020_prerequisites/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/020_prerequisites/</guid><description>Getting Started To start the workshop, follow one of the following depending on whether you are&amp;hellip;
&amp;hellip;running the workshop on your own (in your own account), or &amp;hellip;attending an AWS hosted event (using AWS provided hashes) Once you have completed with either setup, continue with Create a Workspace</description></item><item><title>Launch using eksctl</title><link>/030_eksctl/</link><pubDate>Tue, 07 Aug 2018 13:36:57 -0700</pubDate><guid>/030_eksctl/</guid><description>Launch using eksctl eksctl is a tool jointly developed by AWS and Weaveworks that automates much of the experience of creating EKS clusters.
In this module, we will use eksctl to launch and configure our EKS cluster and nodes.</description></item><item><title>Helm</title><link>/beginner/060_helm/</link><pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate><guid>/beginner/060_helm/</guid><description>Helm This tutorial has been updated for Helm v3. In version 3, the Tiller component was removed, which simplified operations and improved security.
Helm is a package manager for Kubernetes that packages multiple Kubernetes resources into a single logical deployment unit called a Chart. Charts are easy to create, version, share, and publish.
In this chapter, we&amp;rsquo;ll cover installing Helm. Once installed, we&amp;rsquo;ll demonstrate how Helm can be used to deploy a simple nginx webserver, and a more sophisticated microservice.</description></item><item><title>Health Checks</title><link>/beginner/070_healthchecks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/beginner/070_healthchecks/</guid><description>Health Checks By default, Kubernetes will restart a container if it crashes for any reason. It uses Liveness and Readiness probes which can be configured for running a robust application by identifying the healthy containers to send traffic to and restarting the ones when required.
In this section, we will understand how liveness and readiness probes are defined and test the same against different states of a pod. Below is the high level description of how these probes work.</description></item><item><title>Using Spot Instances with EKS</title><link>/beginner/150_spotworkers/</link><pubDate>Tue, 18 Sep 2018 17:40:09 -0500</pubDate><guid>/beginner/150_spotworkers/</guid><description>Using Spot Instances with EKS In this module, you will learn how to provision, manage, and maintain your Kubernetes clusters with Amazon EKS at any scale on Spot Instances to optimize cost and scale.</description></item><item><title>Stateful containers using StatefulSets</title><link>/beginner/170_statefulset/</link><pubDate>Sat, 25 Jan 2020 16:18:56 -0500</pubDate><guid>/beginner/170_statefulset/</guid><description>Stateful containers using StatefulSets StatefulSet manages the deployment and scaling of a set of Pods, and provides guarantees about the ordering and uniqueness of these Pods, suitable for applications that require one or more of the following.
Stable, unique network identifiers Stable, persistent storage Ordered, graceful deployment and scaling Ordered, automated rolling updates In this Chapter, we will review how to deploy MySQL database using StatefulSet and Amazon Elastic Block Store (EBS) as PersistentVolume.</description></item><item><title>Logging with Elasticsearch, Fluentd, and Kibana (EFK)</title><link>/intermediate/230_logging/</link><pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate><guid>/intermediate/230_logging/</guid><description>Implement Logging with EFK In this Chapter, we will deploy a common Kubernetes logging pattern which consists of the following:
Fluentd is an open source data collector providing a unified logging layer, supported by 500+ plugins connecting to many types of systems. Elasticsearch is a distributed, RESTful search and analytics engine. Kibana lets you visualize your Elasticsearch data. Together, Fluentd, Elasticsearch and Kibana is also known as “EFK stack”.</description></item><item><title>Monitoring using Prometheus and Grafana</title><link>/intermediate/240_monitoring/</link><pubDate>Sun, 14 Oct 2018 09:27:46 -0400</pubDate><guid>/intermediate/240_monitoring/</guid><description>Monitoring using Prometheus and Grafana In this Chapter, we will deploy Prometheus and Grafana to monitor Kubernetes cluster</description></item><item><title>EKS CloudWatch Container Insights</title><link>/intermediate/250_cloudwatch_container_insights/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/intermediate/250_cloudwatch_container_insights/</guid><description>In this chapter we will learn and leverage the new CloudWatch Container Insights to see how you can use native CloudWatch features to monitor your EKS Cluster performance.
You can use CloudWatch Container Insights to collect, aggregate, and summarize metrics and logs from your containerized applications and microservices. Container Insights is available for Amazon Elastic Container Service, Amazon Elastic Kubernetes Service, and Kubernetes platforms on Amazon EC2. The metrics include utilization for resources such as CPU, memory, disk, and network.</description></item></channel></rss>