<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>EKS CloudWatch Container Insights on Amazon EKS Workshop</title><link>/intermediate/250_cloudwatch_container_insights/</link><description>Recent content in EKS CloudWatch Container Insights on Amazon EKS Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/intermediate/250_cloudwatch_container_insights/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting Started</title><link>/intermediate/250_cloudwatch_container_insights/gettingstarted/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/intermediate/250_cloudwatch_container_insights/gettingstarted/</guid><description>After you&amp;rsquo;ve completed the prerequisites and Helm is installed and working; We can deploy our Wordpress site. This Helm chart will deploy MariaDB and Wordpress as well as configure a service ingress point for us to access the site through an elastic load balancer.
For our testing we’ll be deploying Wordpress. We could just use a PHP file on the nodes and run NGINX to test as well, but with this Wordpress install you get experience deploying a Helm chart.</description></item><item><title>Install Wordpress</title><link>/intermediate/250_cloudwatch_container_insights/installwordpress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/intermediate/250_cloudwatch_container_insights/installwordpress/</guid><description>We’ll be using the following Wordpress Distribution to install Wordpress to our EKS cluster. To install this we&amp;rsquo;ll be using helm for an easy deployment method.
https://github.com/helm/charts/tree/master/stable/wordpress
In your Cloud9 Workspace terminal you just need to run the following command to deploy WordPress.
helm install understood-zebu stable/wordpress You will see that this chart does a number of items. Including creating a persistent volume claim in EKS, create a Pod named after the release of Wordpress being installed, multiple secrets stores and a stateful set.</description></item><item><title>Accessing Wordpress</title><link>/intermediate/250_cloudwatch_container_insights/accesswp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/intermediate/250_cloudwatch_container_insights/accesswp/</guid><description>Once you have your URL, you can try and Login with the following credentials to see your blog and make sure it’s working. You’ll need your username and password so run the following command to get those.
echo Username: user echo Password: $(kubectl get secret --namespace default understood-zebu-wordpress -o jsonpath=&amp;quot;{.data.wordpress-password}&amp;quot; | base64 --decode) In your favorite browser paste in your Wordpress Admin URL from the Installing Wordpress section. You should be greeted with the following screen.</description></item><item><title>Preparing to Install Container Insights</title><link>/intermediate/250_cloudwatch_container_insights/cwcinstallprep/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/intermediate/250_cloudwatch_container_insights/cwcinstallprep/</guid><description>Preparing to Install CloudWatch Container Insights: The full documentation for CloudWatch Container Insights can be found here: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/deploy-container-insights-EKS.html
Configuring IAM Access for CloudWatch Agent: In order for CloudWatch to get the necessary monitoring info, we need to install the CloudWatch Agent to our EKS Cluster.
In order to do so we first need to assign an IAM Policy. For the purpose of this lab, we will just attach the necessary IAM policy to the existing worker nodes attached policy which should have a name similar to eksctl-eksworkshop-eksctl-nodegro-NodeInstanceRole-XXXX</description></item><item><title>Installing Container Insights</title><link>/intermediate/250_cloudwatch_container_insights/cwcinstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/intermediate/250_cloudwatch_container_insights/cwcinstall/</guid><description>Installing CloudWatch Container Insights using QuickStart: We&amp;rsquo;ll be using the QuickStart to make the install simple and easy for the Container Insights.
You can find the full information and manual install steps here: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Container-Insights-setup-EKS-quickstart.html
From your Cloud9 Terminal you will just need to run the following command:
curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-yaml-templates/quickstart/cwagent-fluentd-quickstart.yaml | sed &amp;quot;s/{{cluster_name}}/eksworkshop-eksctl/;s/{{region_name}}/us-east-2/&amp;quot; | kubectl apply -f - With this quick start it will push the necessary daemon sets to collect the data for CloudWatch Containers Insights.</description></item><item><title>Verify CloudWatch Container Insights is working</title><link>/intermediate/250_cloudwatch_container_insights/verifycwci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/intermediate/250_cloudwatch_container_insights/verifycwci/</guid><description>To verify that data is being collected in CloudWatch, launch the CloudWatch Containers UI in your browser: https://us-east-2.console.aws.amazon.com/cloudwatch/home?region=us-east-2#cw:dashboard=Container;context=~(clusters~'eksworkshop-eksctl~dimensions~(~)~performanceType~'Service
You may need to copy and paste the above link into your browser
From here you can see the metrics are being collected and presented to CloudWatch. You can switch between various drop downs to see EKS Services, EKS Cluster and more.
We can now continue with load testing the cluster to see how these metrics can look under load.</description></item><item><title>Preparing your Load Test</title><link>/intermediate/250_cloudwatch_container_insights/prepareloadtest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/intermediate/250_cloudwatch_container_insights/prepareloadtest/</guid><description>Preparing your Load Test Now that we have monitoring enabled we will simulate heavy load to our EKS Cluster hosting our Wordpress install. While generating the load, we can watch CloudWatch Container Insights for the performance metrics.
Install Siege for load testing on your Workspace: Download Siege by running the below command in your Cloud9 terminal.
curl -C - -O http://download.joedog.org/siege/siege-latest.tar.gz Once downloaded we’ll extract this file and change to the extracted directory.</description></item><item><title>Running the Load Test</title><link>/intermediate/250_cloudwatch_container_insights/runloadtest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/intermediate/250_cloudwatch_container_insights/runloadtest/</guid><description>Run Siege to Load Test your Wordpress Site: Now that Siege is setup and running, we&amp;rsquo;re going to generate some load to our Wordpress site. With that load we can see the metrics change in CloudWatch Container Insights.
From your terminal window in the Siege directory, run the following command.
siege -c 200 -i {YOURLOADBALANCER URL} This command tells Siege to run 200 concurrent connections to your Wordpress site at varying URLS.</description></item><item><title>Viewing our collected metrics</title><link>/intermediate/250_cloudwatch_container_insights/viewvetrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/intermediate/250_cloudwatch_container_insights/viewvetrics/</guid><description>Now let&amp;rsquo;s navigate to CloudWatch Container Insights to view the data we&amp;rsquo;ve generated. https://console.aws.amazon.com/cloudwatch/home?region=us-east-2#cw:dashboard=Container;context=~(clusters~'eksworkshop-eksctl~dimensions~(~)~performanceType~'Service)
From here you can choose a number of different views. We’re going to narrow down our timelines to a custom time rangeof just 30 minute so we can zoom into our recently collected insights.
To do so go to the Time Range option at the top right of The CloudWatch Container Insights windows and selecting 30 minutes.</description></item><item><title>Using CloudWatch Alarms</title><link>/intermediate/250_cloudwatch_container_insights/cwalarms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/intermediate/250_cloudwatch_container_insights/cwalarms/</guid><description>You can use the CloudWatch metrics now to generate various alarms for your EKS Cluster based off assigned metrics.
In CloudWatch Container Insights we’re going to drill down to create an alarm using CloudWatch for CPU Utilization for the Wordpress service. To do so click on the three vertical dots in the upper right of the CPU Utilization box. And select View in Metrics. This will isolate us to a single pane view of CPU Utilization for the eksworkshop-eksctl cluster.</description></item><item><title>Wrapping Up</title><link>/intermediate/250_cloudwatch_container_insights/wraup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/intermediate/250_cloudwatch_container_insights/wraup/</guid><description>Wrapping Up: As you can see it’s fairly easy to get CloudWatch Container Insights to work, and set alarms for CPU and other metrics. With CloudWatch Container Insights we remove the need to manage and update your own monitoring infrastructure and allow you to use native AWS solutions that you don’t have to manage the platform for.
Cleanup your Environment: Let&amp;rsquo;s clean up Wordpress so it&amp;rsquo;s not running in your cluster any longer.</description></item></channel></rss>