<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Monitoring using Prometheus and Grafana on Amazon EKS Workshop</title><link>/intermediate/240_monitoring/</link><description>Recent content in Monitoring using Prometheus and Grafana on Amazon EKS Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 14 Oct 2018 09:27:46 -0400</lastBuildDate><atom:link href="/intermediate/240_monitoring/index.xml" rel="self" type="application/rss+xml"/><item><title>Prereqs</title><link>/intermediate/240_monitoring/prereqs/</link><pubDate>Sun, 14 Oct 2018 19:56:14 -0400</pubDate><guid>/intermediate/240_monitoring/prereqs/</guid><description>Is helm installed? We will use helm to install Prometheus &amp;amp; Grafana monitoring tools for this chapter. Please review installing helm chapter for instructions if you don&amp;rsquo;t have it installed.
helm list</description></item><item><title>Deploy Prometheus</title><link>/intermediate/240_monitoring/deploy-prometheus/</link><pubDate>Sun, 14 Oct 2018 20:33:02 -0400</pubDate><guid>/intermediate/240_monitoring/deploy-prometheus/</guid><description>Deploy Prometheus First we are going to install Prometheus. In this example, we are primarily going to use the standard configuration, but we do override the storage class. We will use gp2 EBS volumes for simplicity and demonstration purpose. When deploying in production, you would use io1 volumes with desired IOPS and increase the default storage size in the manifests to get better performance. Run the following command:
kubectl create namespace prometheus helm install prometheus stable/prometheus \ --namespace prometheus \ --set alertmanager.</description></item><item><title>Deploy Grafana</title><link>/intermediate/240_monitoring/deploy-grafana/</link><pubDate>Sun, 14 Oct 2018 20:54:13 -0400</pubDate><guid>/intermediate/240_monitoring/deploy-grafana/</guid><description>Deploy Grafana We are now going to install Grafana. For this example, we are primarily using the Grafana defaults, but we are overriding several parameters. As with Prometheus, we are setting the storage class to gp2, admin password, configuring the datasource to point to Prometheus and creating an external load balancer for the service.
kubectl create namespace grafana helm install grafana stable/grafana \ --namespace grafana \ --set persistence.storageClassName=&amp;quot;gp2&amp;quot; \ --set adminPassword='EKS!</description></item><item><title>Dashboards</title><link>/intermediate/240_monitoring/dashboards/</link><pubDate>Sun, 14 Oct 2018 21:03:43 -0400</pubDate><guid>/intermediate/240_monitoring/dashboards/</guid><description>Create Dashboards Login into Grafana dashboard using credentials supplied during configuration
You will notice that &amp;lsquo;Install Grafana&amp;rsquo; &amp;amp; &amp;lsquo;create your first data source&amp;rsquo; are already completed. We will import community created dashboard for this tutorial
Click &amp;lsquo;+&amp;rsquo; button on left panel and select &amp;lsquo;Import&amp;rsquo;
Enter 3131 dashboard id under Grafana.com Dashboard &amp;amp; click &amp;lsquo;Load&amp;rsquo;.
Leave the defaults, select &amp;lsquo;Prometheus&amp;rsquo; as the endpoint under prometheus data sources drop down, click &amp;lsquo;Import&amp;rsquo;.</description></item><item><title>Cleanup</title><link>/intermediate/240_monitoring/cleanup/</link><pubDate>Sun, 14 Oct 2018 21:03:30 -0400</pubDate><guid>/intermediate/240_monitoring/cleanup/</guid><description>Uninstall Prometheus and Grafana helm uninstall prometheus --namespace prometheus helm uninstall grafana --namespace grafana</description></item></channel></rss>