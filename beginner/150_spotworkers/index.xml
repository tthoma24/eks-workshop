<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Using Spot Instances with EKS on Amazon EKS Workshop</title><link>/beginner/150_spotworkers/</link><description>Recent content in Using Spot Instances with EKS on Amazon EKS Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 18 Sep 2018 17:40:09 -0500</lastBuildDate><atom:link href="/beginner/150_spotworkers/index.xml" rel="self" type="application/rss+xml"/><item><title>Add EC2 Workers - Spot</title><link>/beginner/150_spotworkers/workers/</link><pubDate>Tue, 07 Aug 2018 11:05:19 -0700</pubDate><guid>/beginner/150_spotworkers/workers/</guid><description>We have our EKS Cluster and worker nodes already, but we need some Spot Instances configured as workers. We also need a Node Labeling strategy to identify which instances are Spot and which are on-demand so that we can make more intelligent scheduling decisions. We will use eksctl to launch new worker nodes that will connect to the EKS cluster.
But first, we will add a new label to the OnDemand worker nodes</description></item><item><title>Deploy the AWS Node Termination Handler</title><link>/beginner/150_spotworkers/deployhandler/</link><pubDate>Tue, 07 Aug 2018 12:32:40 -0700</pubDate><guid>/beginner/150_spotworkers/deployhandler/</guid><description>We need Helm to deploy the AWS Node Termination Handler, see installing Helm for instructions.
In this section, we will prepare our cluster to handle Spot interruptions.
If the available On-Demand capacity of a particular instance type is deleted, the Spot Instance is sent an interruption notice two minutes ahead to gracefully wrap up things. We will deploy a pod on each spot instance to detect and redeploy applications elsewhere in the cluster.</description></item><item><title>Deploy an Application on Spot</title><link>/beginner/150_spotworkers/preferspot/</link><pubDate>Tue, 18 Sep 2018 17:40:09 -0500</pubDate><guid>/beginner/150_spotworkers/preferspot/</guid><description>We are redesigning our Microservice example and want our frontend service to be deployed on Spot Instances when they are available. We will use Node Affinity in our manifest file to configure this.
Configure Node Affinity and Tolerations Open the deployment manifest in your Cloud9 editor - ~/environment/ecsdemo-frontend/kubernetes/deployment.yaml
Edit the spec to configure NodeAffinity to prefer Spot Instances, but not require them. This will allow the pods to be scheduled on On-Demand nodes if no spot instances were available or correctly labelled.</description></item><item><title>Cleanup</title><link>/beginner/150_spotworkers/cleanup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/beginner/150_spotworkers/cleanup/</guid><description>Cleanup our Microservices deployment
cd ~/environment/ecsdemo-frontend kubectl delete -f kubernetes/service.yaml kubectl delete -f kubernetes/deployment.yaml cd ~/environment/ecsdemo-crystal kubectl delete -f kubernetes/service.yaml kubectl delete -f kubernetes/deployment.yaml cd ~/environment/ecsdemo-nodejs kubectl delete -f kubernetes/service.yaml kubectl delete -f kubernetes/deployment.yaml Cleanup the AWS Node Termination Handler Daemonset
helm uninstall aws-node-termination-handler --namespace=kube-system To delete the label and the Node Group created by this module, run the following commands
kubectl label nodes --all lifecycle- eksctl delete nodegroup -f ~/environment/eks-workshop-ng-spot.</description></item></channel></rss>