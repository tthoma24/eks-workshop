<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Deploy the Example Microservices on Amazon EKS Workshop</title><link>/beginner/050_deploy/</link><description>Recent content in Deploy the Example Microservices on Amazon EKS Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 18 Sep 2018 17:40:09 -0500</lastBuildDate><atom:link href="/beginner/050_deploy/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploy our Sample Applications</title><link>/beginner/050_deploy/applications/</link><pubDate>Tue, 18 Sep 2018 16:01:14 -0500</pubDate><guid>/beginner/050_deploy/applications/</guid><description>apiVersion: apps/v1 kind: Deployment metadata: name: ecsdemo-nodejs labels: app: ecsdemo-nodejs namespace: default spec: replicas: 1 selector: matchLabels: app: ecsdemo-nodejs strategy: rollingUpdate: maxSurge: 25% maxUnavailable: 25% type: RollingUpdate template: metadata: labels: app: ecsdemo-nodejs spec: containers: - image: brentley/ecsdemo-nodejs:latest imagePullPolicy: Always name: ecsdemo-nodejs ports: - containerPort: 3000 protocol: TCP In the sample file above, we describe the service and how it should be deployed. We will write this description to the kubernetes api using kubectl, and kubernetes will ensure our preferences are met as the application is deployed.</description></item><item><title>Deploy NodeJS Backend API</title><link>/beginner/050_deploy/deploynodejs/</link><pubDate>Tue, 18 Sep 2018 17:39:30 -0500</pubDate><guid>/beginner/050_deploy/deploynodejs/</guid><description>Let’s bring up the NodeJS Backend API!
Copy/Paste the following commands into your Cloud9 workspace:
cd ~/environment/ecsdemo-nodejs kubectl apply -f kubernetes/deployment.yaml kubectl apply -f kubernetes/service.yaml We can watch the progress by looking at the deployment status:
kubectl get deployment ecsdemo-nodejs</description></item><item><title>Deploy Crystal Backend API</title><link>/beginner/050_deploy/deploycrystal/</link><pubDate>Tue, 18 Sep 2018 17:40:03 -0500</pubDate><guid>/beginner/050_deploy/deploycrystal/</guid><description>Let’s bring up the Crystal Backend API!
Copy/Paste the following commands into your Cloud9 workspace:
cd ~/environment/ecsdemo-crystal kubectl apply -f kubernetes/deployment.yaml kubectl apply -f kubernetes/service.yaml We can watch the progress by looking at the deployment status:
kubectl get deployment ecsdemo-crystal</description></item><item><title>Let's check Service Types</title><link>/beginner/050_deploy/servicetype/</link><pubDate>Tue, 18 Sep 2018 17:40:09 -0500</pubDate><guid>/beginner/050_deploy/servicetype/</guid><description>Before we bring up the frontend service, let&amp;rsquo;s take a look at the service types we are using: This is kubernetes/service.yaml for our frontend service: apiVersion: v1 kind: Service metadata: name: ecsdemo-frontend spec: selector: app: ecsdemo-frontend type: LoadBalancer ports: - protocol: TCP port: 80 targetPort: 3000 Notice type: LoadBalancer: This will configure an ELB to handle incoming traffic to this service.
Compare this to kubernetes/service.yaml for one of our backend services: apiVersion: v1 kind: Service metadata: name: ecsdemo-nodejs spec: selector: app: ecsdemo-nodejs ports: - protocol: TCP port: 80 targetPort: 3000 Notice there is no specific service type described.</description></item><item><title>Ensure the ELB Service Role exists</title><link>/beginner/050_deploy/servicerole/</link><pubDate>Tue, 18 Sep 2018 17:40:09 -0500</pubDate><guid>/beginner/050_deploy/servicerole/</guid><description>In AWS accounts that have never created a load balancer before, it&amp;rsquo;s possible that the service role for ELB might not exist yet.
We can check for the role, and create it if it&amp;rsquo;s missing.
Copy/Paste the following commands into your Cloud9 workspace:
aws iam get-role --role-name &amp;quot;AWSServiceRoleForElasticLoadBalancing&amp;quot; || aws iam create-service-linked-role --aws-service-name &amp;quot;elasticloadbalancing.amazonaws.com&amp;quot;</description></item><item><title>Deploy Frontend Service</title><link>/beginner/050_deploy/deployfrontend/</link><pubDate>Tue, 18 Sep 2018 17:40:09 -0500</pubDate><guid>/beginner/050_deploy/deployfrontend/</guid><description>Challenge: Let’s bring up the Ruby Frontend!
Expand here to see the solution Copy/Paste the following commands into your Cloud9 workspace:
cd ~/environment/ecsdemo-frontend kubectl apply -f kubernetes/deployment.yaml kubectl apply -f kubernetes/service.yaml We can watch the progress by looking at the deployment status:
kubectl get deployment ecsdemo-frontend</description></item><item><title>Find the Service Address</title><link>/beginner/050_deploy/viewservices/</link><pubDate>Tue, 18 Sep 2018 17:40:09 -0500</pubDate><guid>/beginner/050_deploy/viewservices/</guid><description>Now that we have a running service that is type: LoadBalancer we need to find the ELB&amp;rsquo;s address. We can do this by using the get services operation of kubectl:
kubectl get service ecsdemo-frontend Notice the field isn&amp;rsquo;t wide enough to show the FQDN of the ELB. We can adjust the output format with this command:
kubectl get service ecsdemo-frontend -o wide If we wanted to use the data programatically, we can also output via json.</description></item><item><title>Scale the Backend Services</title><link>/beginner/050_deploy/scalebackend/</link><pubDate>Tue, 18 Sep 2018 17:40:09 -0500</pubDate><guid>/beginner/050_deploy/scalebackend/</guid><description>When we launched our services, we only launched one container of each. We can confirm this by viewing the running pods:
kubectl get deployments Now let&amp;rsquo;s scale up the backend services:
kubectl scale deployment ecsdemo-nodejs --replicas=3 kubectl scale deployment ecsdemo-crystal --replicas=3 Confirm by looking at deployments again:
kubectl get deployments Also, check the browser tab where we can see our application running. You should now see traffic flowing to multiple backend services.</description></item><item><title>Scale the Frontend</title><link>/beginner/050_deploy/scalefrontend/</link><pubDate>Tue, 18 Sep 2018 17:40:09 -0500</pubDate><guid>/beginner/050_deploy/scalefrontend/</guid><description>Challenge: Let&amp;rsquo;s also scale our frontend service!
Expand here to see the solution kubectl get deployments kubectl scale deployment ecsdemo-frontend --replicas=3 kubectl get deployments Check the browser tab where we can see our application running. You should now see traffic flowing to multiple frontend services.</description></item><item><title>Cleanup the applications</title><link>/beginner/050_deploy/cleanup/</link><pubDate>Tue, 07 Aug 2018 13:37:53 -0700</pubDate><guid>/beginner/050_deploy/cleanup/</guid><description>To delete the resources created by the applications, we should delete the application deployments:
Undeploy the applications:
cd ~/environment/ecsdemo-frontend kubectl delete -f kubernetes/service.yaml kubectl delete -f kubernetes/deployment.yaml cd ~/environment/ecsdemo-crystal kubectl delete -f kubernetes/service.yaml kubectl delete -f kubernetes/deployment.yaml cd ~/environment/ecsdemo-nodejs kubectl delete -f kubernetes/service.yaml kubectl delete -f kubernetes/deployment.yaml</description></item></channel></rss>